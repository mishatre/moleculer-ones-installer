
&НаСервере
Перем ДанныеРасширения;
		
Перем ДанныеПлатформы;
Перем Совместимость;  

#Область БазовыеПараметры

&НаСервере
Функция УстановитьПараметрыУстановщика()
	
	ОбработкаОбъект   = РеквизитФормыВЗначение("Объект");
	МетаданныеОбъекта = ОбработкаОбъект.Метаданные();

	ПараметрыУстановщика = НовыйПараметрыУстановщика();
	ПараметрыУстановщика.ИмяРасширения    = "MoleculerOneS";
	ПараметрыУстановщика.ОсновнойМодуль   = "Moleculer";
	ПараметрыУстановщика.Представление    = МетаданныеОбъекта.Представление();
	ПараметрыУстановщика.Версия           = МетаданныеОбъекта.Комментарий;
	ПараметрыУстановщика.ИмяТекущегоФайла = ОбработкаОбъект.ИспользуемоеИмяФайла;
	//ПараметрыУстановщика
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	УстановкаВозможна = УстановкаРасширенияВозможна(ОписаниеОшибки);
	  
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УстановкаВозможна Тогда
		Если СтоитЗапретИспользованияСинхронныхМетодов() Тогда	
			Элементы.СтраницыГлавнаяПанель.ТекущаяСтраница = Элементы.СтраницаЗапускНовогоСеанса;
			ПодключитьОбработчикОжидания("ЗапуститьСеансТолстогоКлиента", 2000);
		КонецЕсли;
	КонецЕсли;  
		
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРасширение(Команда)
	
	ДвоичныеДанные = Неопределено;
	Если ЗначениеЗаполнено(ФайлРасширения) Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлРасширения);
	Иначе      	
		ДвоичныеДанные = СкачатьФайлРасширенияССервера();
		Если ДвоичныеДанные = Неопределено Тогда
			// Обработать ошибку скачивания
		КонецЕсли;
	КонецЕсли;    
	
	УстановитьРасширениеНаСервере(ДвоичныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРасширение(Команда)
	УдалитьРасширениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗапускНовогоСеансаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("ЗапуститьСеансТолстогоКлиента"); 
	Элементы.ДекорацияЗапускНовогоСеансаОтменен.Видимость = Истина;
	Элементы.ДекорацияЗапускНовогоСеанса       .Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗапускНовогоСеансаОтменен(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Элементы.ДекорацияЗапускНовогоСеансаОтменен.Видимость = Ложь;
	Элементы.ДекорацияЗапускНовогоСеанса       .Видимость = Истина;
	ПодключитьОбработчикОжидания("ЗапуститьСеансТолстогоКлиента", 100); 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму() 
	
	Если ДанныеРасширения = Неопределено Тогда
		ЗагрузитьДанныеУстановленногоРасширения()	
	КонецЕсли;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = ПараметрыУстановщика.Представление;
	
	Если Не УстановкаВозможна Тогда
		Элементы.СтраницыГлавнаяПанель.ТекущаяСтраница = Элементы.СтраницаУстановкаНеПоддерживается;		
		Элементы[ОписаниеОшибки.ИмяГруппыФормы].Видимость = Истина;
	КонецЕсли;
	
	Если ДанныеРасширения.Активно Тогда
		Элементы.ГруппаСостояние.Видимость = Истина; 
		СостояниеРасширения = Новый ФорматированнаяСтрока(
			"Расширение установлено и активно", Новый Шрифт("",12), ЦветаСтиля.ЦветАкцента);
	ИначеЕсли ДанныеРасширения.Установлено Тогда 
		Элементы.ГруппаСостояние.Видимость = Истина;
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			"Расширение установлено ", Новый Шрифт("",12), ЦветаСтиля.ЦветАкцента));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			"(не активно)",, ЦветаСтиля.ЦветОсобогоТекста));
		СостояниеРасширения = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;  
	
	Если ДанныеРасширения.Активно ИЛИ ДанныеРасширения.Установлено Тогда
		УстановитьВерсиюРасширения(ДанныеРасширения.Версия); 
	КонецЕсли;  
	
	ВерсияУстановщика = ПараметрыУстановщика.Версия;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВерсиюРасширения(ТекущаяВерсия, НоваяВерсия = Неопределено)
	
	МассивСтрок = Новый Массив();  
	МассивСтрок.Добавить("Текущая версия:");
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(
		Новый ФорматированнаяСтрока(
			ТекущаяВерсия, 
			Новый Шрифт("",12), 
			?(НоваяВерсия = Неопределено, ЦветаСтиля.ЦветАкцента, ЦветаСтиля.ЦветОсобогоТекста)
		)
	); 
	Если НоваяВерсия <> Неопределено Тогда  
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(БиблиотекаКартинок.СтрелкаВправо);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				ТекущаяВерсия, 
				Новый Шрифт("",12), 
				ЦветаСтиля.ЦветАкцента
			)
		);            
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				"обновить", 
				Новый Шрифт("",12), 
				ЦветаСтиля.ГиперссылкаЦвет,
				,
				"обновить"
			)
		);
	КонецЕсли;

	ВерсияРасширения = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры
	
#КонецОбласти

Функция УстановкаРасширенияВозможна(ОписаниеОшибки)
	
	ОписаниеОшибки = Новый Структура();     
	ОписаниеОшибки.Вставить("ТипОшибки");
	ОписаниеОшибки.Вставить("ИмяГруппыФормы");
	
	#Если ВебКлиент Тогда     
		ОписаниеОшибки.ТипОшибки      = "УстановкаВВебКлиенте"; 
		ОписаниеОшибки.ИмяГруппыФормы = "ГруппаУстановкаВВебКлиенте";
		Возврат Ложь;
	#КонецЕсли 
	
	Если ВерсияПлатформыНиже(Совместимость.МинимальнаяВерсияПлатформы) Тогда
		ОписаниеОшибки.ТипОшибки      = "МинимальнаяВерсияПлатформы";
		ОписаниеОшибки.ИмяГруппыФормы = "ГруппаМинимальнаяВерсияПлатформы";
		Возврат Ложь;
		Сообщить("Необходима версия платформы 8.3.10 или выше");
	КонецЕсли;     
	
	Если ВерсияРежимаСовместимостиНиже(Совместимость.МинВерсияРежимаСовместимости) Тогда
		ОписаниеОшибки.ТипОшибки      = "МинВерсияРежимаСовместимости";
		ОписаниеОшибки.ИмяГруппыФормы = "ГруппаМинВерсияРежимаСовместимости";
		Возврат Ложь;
		Сообщить("Необходим режим совместимости конфигурации 8.3.9 или выше");
	КонецЕсли;   
	
	ЗагрузитьДанныеУстановленногоРасширения();
	
	Если МодульВстроенВКонфигурацию() Тогда
		ОписаниеОшибки.ТипОшибки      = "МодульВстроенВКонфигурацию";
		ОписаниеОшибки.ИмяГруппыФормы = "ГруппаМодульВстроенВКонфигурацию";
		Возврат Ложь;
		Сообщить("В конфигурации встроена подсистема ""Инструменты разработчика"". Установка расширения невозможна.");
	КонецЕсли;   
	
	Возврат Истина
	
КонецФункции

Функция СтоитЗапретИспользованияСинхронныхМетодов() 
	
	Файл = Новый Файл("");   
	
	Попытка
		ФайлСуществует = Файл.Существует();
	Исключение   
		Возврат Истина;
	КонецПопытки;     
	
	Возврат Ложь;     
	
КонецФункции

&НаКлиенте
Функция ЗапуститьСеансТолстогоКлиента()
	
	#Если Не ВебКлиент Тогда
		КлючиПараметров = Новый Массив();
		КлючиПараметров.Добавить("ENTERPRISE /IBConnectionString");
		КлючиПараметров.Добавить("""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""") + """");        
		КлючиПараметров.Добавить("/RunModeManagedApplication");
		КлючиПараметров.Добавить("/DEBUG");
		КлючиПараметров.Добавить("/Execute");
		КлючиПараметров.Добавить("""" + ПараметрыУстановщика.ИмяТекущегоФайла + """");
		ПараметрыЗапуска = РежимСовместимости_СтрСоединить(КлючиПараметров, " ");
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения, 
			"""" + ИмяИсполняемогоФайлаПлатформы() + """ "
			+ ПараметрыЗапуска
		);
	#КонецЕсли
	
	Закрыть();
	
КонецФункции

#Область Расширение

&НаСервере
Процедура ЗагрузитьДанныеУстановленногоРасширения(ТекущееРасширение = Неопределено)
	
	ДанныеРасширения = Новый Структура();
	ДанныеРасширения.Вставить("Установлено", Ложь        );
	ДанныеРасширения.Вставить("Активно"    , Ложь        );
	ДанныеРасширения.Вставить("Версия"     , ""          );
	ДанныеРасширения.Вставить("Расширение" , Неопределено);
	
	// Антибаг платформы https://partners.v8.1c.ru/forum/t/1607016/m/1607016
	Если ЭтоВерсияПлатформы(803010, 803050, 2265) Тогда 
		Возврат;	
	КонецЕсли;
	
	Расширение = ТекущееРасширение;
	Если ТекущееРасширение = Неопределено Тогда
		Отбор = Новый Структура();   
		Отбор.Вставить("Имя", ПараметрыУстановщика.ИмяРасширения);
		НайденныеСтроки = Вычислить("РасширенияКонфигурации").Получить(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		Расширение = НайденныеСтроки[0];
	КонецЕсли;
	
	ДанныеРасширения.Установлено = Истина;
	ДанныеРасширения.Активно     = Расширение.Активно;
	ДанныеРасширения.Версия      = Расширение.Версия;
	
	ДанныеРасширения.Расширение  = Расширение; 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьРасширениеНаСервере(ДвоичныеДанныеРасширения)

	Если ДанныеРасширения = Неопределено Тогда
		ЗагрузитьДанныеУстановленногоРасширения()	
	КонецЕсли;
	
	Если ДанныеРасширения.Расширение = Неопределено Тогда
		ДанныеРасширения.Расширение = РасширенияКонфигурации.Создать();
	КонецЕсли;
	
	УстановитьСвойстваРасширения(ДанныеРасширения.Расширение);
	
	ДанныеРасширения.Расширение.Записать(ДвоичныеДанныеРасширения);
	
	// Антибаг режима совместимости 8.3.10. В нем флаг ПредупреждатьОбОпасныхДействиях с первого раза не устанавливается https://www.hostedredmine.com/issues/925886
	Если ЭтоВерсияПлатформы(, 80310) Тогда
		Если ДанныеРасширения.Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях Тогда
			ДанныеРасширения.Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			ДанныеРасширения.Расширение.Записать();
		КонецЕсли; 
	КонецЕсли;
	
	ЗагрузитьДанныеУстановленногоРасширения(ДанныеРасширения.Расширение);
	НастроитьФорму();
	
	ДобавитьТекущемуПользователюПраваНастройкиРасширения();
	
КонецПроцедуры 

&НаСервере
Процедура УдалитьРасширениеНаСервере()

	Если ДанныеРасширения = Неопределено Тогда
		ЗагрузитьДанныеУстановленногоРасширения()	
	КонецЕсли;
	
	Если ДанныеРасширения.Установлено Тогда
		ДанныеРасширения.Расширение.Удалить(); 
		ЗагрузитьДанныеУстановленногоРасширения();
		НастроитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваРасширения(Знач ТекущееРасширение)
	
	#Если Сервер И Не Сервер Тогда
		ТекущееРасширение = РасширенияКонфигурации.Создать();
	#КонецЕсли
	Если ВерсияПлатформыВыше(80312) Тогда
		ТекущееРасширение.Активно = Истина;
	КонецЕсли;
	
	Если ВерсияПлатформыВыше(80315) Тогда
		ТекущееРасширение.ИспользоватьОсновныеРолиДляВсехПользователей = Ложь;
	КонецЕсли;
	 
	ТекущееРасширение.БезопасныйРежим = Ложь;
	ТекущееРасширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТекущемуПользователюПраваНастройкиРасширения()
	
КонецПроцедуры

&НаСервере
Функция МодульВстроенВКонфигурацию()
	
	Если ДанныеРасширения = Неопределено Тогда
		ЗагрузитьДанныеУстановленногоРасширения()	
	КонецЕсли;
	
	Возврат ДанныеРасширения.Установлено = Истина И Метаданные.Обработки.Найти("Moleculer") <> Неопределено;
		
КонецФУнкции

Функция СкачатьФайлРасширенияССервера()
	
	Возврат Новый ДвоичныеДанные("C:\development\moleculer-1c\build\1Cv8.cfe");
	
КонецФункции

#КонецОбласти

#Область ДанныеПлатформы

Функция ЭтоВерсияПлатформы(НомерВерсии = Неопределено, НомерРежимаСовместимости = Неопределено, НомерСборки = Неопределено)
	
	Если ДанныеПлатформы = Неопределено Тогда
		УстановитьДанныеВерсииПлатформы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерВерсии) 
		И Не ДанныеПлатформы.ВерсияПлатформы = НомерВерсии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерРежимаСовместимости) 
		И Не ДанныеПлатформы.РежимСовместимости = НомерРежимаСовместимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСборки) 
		И Не ДанныеПлатформы.НомерСборки = НомерСборки Тогда
		Возврат Ложь;
	КонецЕсли;  
	
	Возврат Истина;
	
Конецфункции

Функция ВерсияПлатформыНиже(ЗначениеВерсииПлатформы)

	Если ДанныеПлатформы = Неопределено Тогда
		УстановитьДанныеВерсииПлатформы();
	КонецЕсли;
	
	Возврат ДанныеПлатформы.ВерсияПлатформы < ЗначениеВерсииПлатформы;
	
КонецФункции

Функция ВерсияПлатформыВыше(ЗначениеВерсииПлатформы)

	Если ДанныеПлатформы = Неопределено Тогда
		УстановитьДанныеВерсииПлатформы();
	КонецЕсли;
	
	Возврат ДанныеПлатформы.ВерсияПлатформы > ЗначениеВерсииПлатформы;
	
КонецФункции

Функция ВерсияРежимаСовместимостиНиже(ЗначениеВерсииРежимаСовместимости)

	Если ДанныеПлатформы = Неопределено Тогда
		УстановитьДанныеВерсииПлатформы();
	КонецЕсли;
	
	Возврат ДанныеПлатформы.РежимСовместимости < ЗначениеВерсииРежимаСовместимости;
	
КонецФункции

Функция ВерсияРежимаСовместимостиВыше(ЗначениеВерсииРежимаСовместимости)

	Если ДанныеПлатформы = Неопределено Тогда
		УстановитьДанныеВерсииПлатформы();
	КонецЕсли;
	
	Возврат ДанныеПлатформы.РежимСовместимости > ЗначениеВерсииРежимаСовместимости;
	
КонецФункции

Процедура УстановитьДанныеВерсииПлатформы()
	
	ДанныеПлатформы = Новый Структура();
	ДанныеПлатформы.Вставить("ВерсияПлатформы"   , 0);
	ДанныеПлатформы.Вставить("НомерСборки"       , 0);
	ДанныеПлатформы.Вставить("РежимСовместимости", 0);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ДанныеПриложения = РазобратьНомерВерсии(СистемнаяИнформация.ВерсияПриложения);	
	
	ДанныеПлатформы.ВерсияПлатформы = ДанныеПриложения.ВерсияПлатформы;
	ДанныеПлатформы.НомерСборки     = ДанныеПриложения.НомерСборки;
	
	ТекущийРежимСовместимости = Метаданные.РежимСовместимости;
	Если ТекущийРежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		ДанныеПлатформы.ВерсияРежимаСовместимости = ДанныеПлатформы.ВерсияПлатформы;
	Иначе
		СтрокаВерсии = СтрЗаменить(ТекущийРежимСовместимости, "Версия" , "");
		СтрокаВерсии = СтрЗаменить(СтрокаВерсии             , "Version", ""); 
		ДанныеРежимаСовместимости = РазобратьНомерВерсии(СтрокаВерсии, "_"); 
		ДанныеПлатформы.РежимСовместимости = ДанныеРежимаСовместимости.ВерсияПлатформы;
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьНомерВерсии(НомерВерсии, Разделитель = ".")
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы", 0);
	Результат.Вставить("НомерСборки", 0);
	
	СтрокаВерсияПлатформы = "";
	ФрагментыВерсии = РежимСовместимости_СтрРазделить(НомерВерсии, Разделитель);
	Для Индекс = 0 По Мин(ФрагментыВерсии.ВГраница(), 2) Цикл   
		Значение = Число(ФрагментыВерсии[Индекс]);
		СтрокаВерсияПлатформы = СтрокаВерсияПлатформы + Формат(Значение, "ND=2; NLZ="); 
	КонецЦикла;  
		
	Результат.ВерсияПлатформы = Число(СтрокаВерсияПлатформы);
		
	Если ФрагментыВерсии.Количество() = 4 Тогда
		Результат.НомерСборки = Число(ФрагментыВерсии[3]);		
	КонецЕсли; 
	                
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоПлатформаWindows() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат Ложь
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;

КонецФункции
	
&НаКлиенте
Функция ЭтоУчебнаяПлатформа() Экспорт 

	ВременныйФайл = ПолучитьИмяВременногоФайла("mxl");
	ТабДок = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.MXL7); // В учебной версии платформы это запрещено https://www.hostedredmine.com/issues/923942
	Исключение
		ОписаниеОшибки = ОписаниеОшибки(); 
		Если Найти(ОписаниеОшибки, "синхронных") > 0 Тогда
			// Использование синхронных методов на клиенте запрещено!
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецПопытки; 
	УдалитьФайлы(ВременныйФайл);
	Возврат Ложь;

КонецФункции

&НаКлиенте
// Добавляет если нужно расширение ".exe"
Функция ИмяИсполняемогоФайла(Знач ИмяБезРасширения)
	Если ЭтоПлатформаWindows() Тогда
		Возврат ИмяБезРасширения + ".exe";
	КонецЕсли;
	Возврат ИмяБезРасширения;
КонецФункции

&НаКлиенте
Функция ИмяИсполняемогоФайлаПлатформы(Полное = Истина, Тонкий = Ложь) Экспорт 
	Результат = "1cv8";
	Если Тонкий Тогда
		Результат = Результат + "c";
	КонецЕсли; 
	Если ЭтоУчебнаяПлатформа() Тогда
		Результат = Результат + "t";
	КонецЕсли; 
	Результат = ИмяИсполняемогоФайла(Результат);
	Если Полное Тогда
		Результат = КаталогПрограммы() + Результат;
	КонецЕсли; 
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область БазовыеПараметры

Функция НовыйПараметрыУстановщика()
	
	Результат = Новый Структура(); 
	Результат.Вставить("Представление"   , "");
	Результат.Вставить("ИмяРасширения"   , "");
	Результат.Вставить("ОсновнойМодуль"  , "");
	Результат.Вставить("Версия"          , "");
	Результат.Вставить("АдресРасширения" , "");
	Результат.Вставить("ИмяТекущегоФайла", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РежимСовместимости 

Функция ИнициализироватьПараметрыРежимаСовместимости()

	Совместимость = Новый Структура();
	Совместимость.Вставить("СтрРазделить", 80306); 
	Совместимость.Вставить("СтрСоединить", 80306); 
	
	Совместимость.Вставить("МинимальнаяВерсияПлатформы"  , 80310);
	Совместимость.Вставить("МинВерсияРежимаСовместимости", 80309);
	
КонецФункции

Функция РежимСовместимости_СтрРазделить(Строка, Разделитель, ВключатьПустые = Истина)

	Если ВерсияПлатформыНиже(Совместимость.СтрРазделить) Тогда
		МассивЧастей = Новый Массив();
		ЧастиСтроки = СтрЗаменить(Строка, Разделитель, Символы.ПС);
		Для НомерСтроки = 1 По СтрЧислоСтрок(ЧастиСтроки) Цикл
			ЧастьСтроки = СтрПолучитьСтроку(ЧастиСтроки, НомерСтроки);
			Если ВключатьПустые = Ложь И Не ЗначениеЗаполнено(ЧастьСтроки) Тогда
				Продолжить;
			КонецЕсли;
			МассивЧастей.Добавить(ЧастьСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Вычислить("СтрРазделить(Строка, Разделитель, ВключатьПустые)");
	
КонецФункции 


Функция РежимСовместимости_СтрСоединить(Строка, Разделитель = "")

	Если ВерсияПлатформыНиже(Совместимость.СтрСоединить) И ВерсияРежимаСовместимостиНиже(Совместимость.СтрСоединить) Тогда
		ИтоговаяСтрока = "";
		Для Каждого ЧастьСтроки Из Строка Цикл
			ИтоговаяСтрока = ИтоговаяСтрока + ЧастьСтроки + Разделитель;
		КонецЦикла;     
		Если СтрДлина(Разделитель) <> 0 Тогда
			ИтоговаяСтрока = Лев(ИтоговаяСтрока, СтрДлина(ИтоговаяСтрока) - СтрДлина(Разделитель));
		КонецЕсли;
		Возврат ИтоговаяСтрока;
	КонецЕсли;
	
	Возврат Вычислить("СтрСоединить(Строка, Разделитель)");
	
КонецФункции

#КонецОбласти

#КонецОбласти

ВерсияПлатформы = 0;
ИнициализироватьПараметрыРежимаСовместимости();   

УстановитьПараметрыУстановщика();

